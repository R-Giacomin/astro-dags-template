from __future__ import annotations
from airflow.decorators import dag, task
from airflow.operators.python import get_current_context
import pendulum
import requests
import pandas as pd
from airflow.providers.google.cloud.hooks.bigquery import BigQueryHook

# Configura√ß√µes
GCP_PROJECT = "gen-lang-client-0010767843" 
BQ_DATASET  = "fda"     
BQ_TABLE    = "fda_aspirin_events"
BQ_LOCATION = "US"      
GCP_CONN_ID = "google_cloud_default"

API_BASE_URL = "https://api.fda.gov/drug/event.json"
API_LIMIT = 50  # Reduzido para evitar sobrecarga

DEFAULT_ARGS = {
    "email_on_failure": True,
    "owner": "Generated by Gemini",
}

def extract_specific_fields(record):
    """
    Extrai os campos espec√≠ficos de cada registro da FDA.
    """
    try:
        # Campos b√°sicos
        safetyreportid = record.get('safetyreportid')
        receivedate = record.get('receivedate')
        serious = record.get('serious')
        
        # Campos aninhados - paciente
        patient_sex = None
        if 'patient' in record and record['patient']:
            patient_sex = record['patient'].get('patientsex')
        
        # Campos aninhados - rea√ß√µes (pegar a primeira rea√ß√£o)
        reactionmeddrapt = None
        if 'patient' in record and record['patient']:
            if 'reaction' in record['patient'] and record['patient']['reaction']:
                first_reaction = record['patient']['reaction'][0]
                reactionmeddrapt = first_reaction.get('reactionmeddrapt')
        
        return {
            'safetyreportid': safetyreportid,
            'receivedate': receivedate,
            'serious': serious,
            'patient_patientsex': patient_sex,
            'reactionmeddrapt': reactionmeddrapt
        }
    except Exception as e:
        print(f"‚ùå Erro ao extrair campos do registro: {e}")
        return None

@task
def fetch_and_load_fda_data():
    """
    Busca dados de eventos adversos para Aspirin - UM DIA POR VEZ.
    """
    # ... (c√≥digo anterior at√© a extra√ß√£o dos dados) ...

    # Processar e carregar para BigQuery
    if not df.empty:
        print("üëÄ Preview do DataFrame:")
        print(df.head())
        print(f"üìä Tipos de dados originais:")
        print(df.dtypes)
        
        # CORRE√á√ÉO CR√çTICA: Converter tipos de dados antes do BigQuery
        if 'serious' in df.columns:
            # Converter para inteiro, tratando valores ausentes
            df['serious'] = pd.to_numeric(df['serious'], errors='coerce').fillna(0).astype(int)
        
        if 'patient_patientsex' in df.columns:
            # Converter para inteiro, tratando valores ausentes
            df['patient_patientsex'] = pd.to_numeric(df['patient_patientsex'], errors='coerce').fillna(0).astype(int)
        
        if 'receivedate' in df.columns:
            # Converter para datetime
            df['receivedate'] = pd.to_datetime(df['receivedate'], format='%Y%m%d', errors='coerce')
        
        # Garantir que safetyreportid e reactionmeddrapt sejam strings
        if 'safetyreportid' in df.columns:
            df['safetyreportid'] = df['safetyreportid'].astype(str)
        
        if 'reactionmeddrapt' in df.columns:
            df['reactionmeddrapt'] = df['reactionmeddrapt'].astype(str)
        
        print(f"üîÑ Tipos de dados ap√≥s convers√£o:")
        print(df.dtypes)
        
        # Remover linhas com valores cr√≠ticos nulos
        initial_count = len(df)
        df = df.dropna(subset=['safetyreportid', 'receivedate'])
        final_count = len(df)
        print(f"üìä Linhas ap√≥s limpeza: {final_count}/{initial_count}")
        
        if df.empty:
            print("‚ö†Ô∏è Nenhuma linha v√°lida ap√≥s limpeza.")
            return "No valid data to load"
        
        # Carregar para BigQuery
        try:
            bq_hook = BigQueryHook(gcp_conn_id=GCP_CONN_ID, location=BQ_LOCATION, use_legacy_sql=False)
            credentials = bq_hook.get_credentials()
            destination_table = f"{BQ_DATASET}.{BQ_TABLE}"

            # Schema expl√≠cito
            table_schema = [
                {"name": "safetyreportid", "type": "STRING"},
                {"name": "receivedate", "type": "TIMESTAMP"},
                {"name": "serious", "type": "INTEGER"},
                {"name": "patient_patientsex", "type": "INTEGER"},
                {"name": "reactionmeddrapt", "type": "STRING"}
            ]

            print(f"üöÄ Carregando {len(df)} linhas para BigQuery...")
            
            df.to_gbq(
                destination_table=destination_table,
                project_id=GCP_PROJECT,
                if_exists="append",
                credentials=credentials,
                table_schema=table_schema,
                location=BQ_LOCATION,
                progress_bar=False,
            )
            print(f"‚úÖ Carga para BigQuery conclu√≠da! {len(df)} linhas carregadas.")
            return f"Successfully loaded {len(df)} records for date {start_date}"
            
        except Exception as e:
            print(f"‚ùå Erro no BigQuery: {e}")
            
            # Tentativa alternativa: criar tabela primeiro com uma linha
            try:
                print("üîÑ Tentando criar tabela primeiro...")
                sample_data = [{
                    'safetyreportid': 'INIT',
                    'receivedate': pd.Timestamp('2025-09-01'),
                    'serious': 0,
                    'patient_patientsex': 0,
                    'reactionmeddrapt': 'INIT'
                }]
                sample_df = pd.DataFrame(sample_data)
                
                # Garantir tipos corretos no sample
                sample_df['serious'] = sample_df['serious'].astype(int)
                sample_df['patient_patientsex'] = sample_df['patient_patientsex'].astype(int)
                sample_df['safetyreportid'] = sample_df['safetyreportid'].astype(str)
                sample_df['reactionmeddrapt'] = sample_df['reactionmeddrapt'].astype(str)
                
                sample_df.to_gbq(
                    destination_table=destination_table,
                    project_id=GCP_PROJECT,
                    if_exists="fail",  # Falha se a tabela j√° existe
                    credentials=credentials,
                    table_schema=table_schema,
                    location=BQ_LOCATION,
                )
                print("‚úÖ Tabela criada com sucesso. Tentando novamente...")
                
                # Agora tentar carregar os dados reais
                df.to_gbq(
                    destination_table=destination_table,
                    project_id=GCP_PROJECT,
                    if_exists="append",
                    credentials=credentials,
                    table_schema=table_schema,
                    location=BQ_LOCATION,
                )
                print(f"‚úÖ Dados carregados ap√≥s cria√ß√£o da tabela! {len(df)} linhas.")
                return f"Successfully loaded {len(df)} records"
                
            except Exception as create_error:
                print(f"‚ùå Erro ao criar tabela: {create_error}")
                raise
    else:
        print("‚ö†Ô∏è Nenhum dado para carregar.")
        return "No data to load"

@dag(
    default_args=DEFAULT_ARGS,
    dag_id='fda_aspirin_daily',
    start_date=pendulum.datetime(2025, 9, 1, tz="UTC"),  # Come√ßar em 01/09/2025
    schedule='@daily',  # Executar diariamente
    catchup=True,       # Processar dias passados
    max_active_runs=1,
    tags=['fda', 'aspirin', 'bigquery', 'daily'],
)
def fda_aspirin_daily_dag():
    fetch_and_load_fda_data()

dag = fda_aspirin_daily_dag()
