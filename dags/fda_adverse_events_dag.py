from __future__ import annotations
from airflow.decorators import dag, task
from airflow.operators.python import get_current_context
import pendulum
import requests
import pandas as pd
from airflow.providers.google.cloud.hooks.bigquery import BigQueryHook

# Configurações
GCP_PROJECT = "gen-lang-client-0010767843" 
BQ_DATASET  = "fda"     
BQ_TABLE    = "fda_aspirin_events"
BQ_LOCATION = "US"      
GCP_CONN_ID = "google_cloud_default"

API_BASE_URL = "https://api.fda.gov/drug/event.json"
API_LIMIT = 50  # Reduzido para evitar sobrecarga

DEFAULT_ARGS = {
    "email_on_failure": True,
    "owner": "Generated by Gemini",
}

def extract_specific_fields(record):
    """
    Extrai campos relevantes de um registro da FDA.
    """
    try:
        return {
            "safetyreportid": str(record.get("safetyreportid", "")),
            "receivedate": record.get("receivedate"),  # será convertido depois
            "serious": int(record.get("serious", 0)) if record.get("serious") else 0,
            "patient_patientsex": int(record.get("patient", {}).get("patientsex", 0))
                if "patient" in record else 0,
            "reactionmeddrapt": (
                record.get("patient", {})
                      .get("reaction", [{}])[0]
                      .get("reactionmeddrapt", "")
            )
        }
    except Exception as e:
        print(f"❌ Erro ao extrair campos: {e}")
        return None

@task
def fetch_and_load_fda_data():
    ctx = get_current_context()
    target_date = ctx["data_interval_start"]

    start_date = target_date.strftime('%Y%m%d')
    end_date   = target_date.strftime('%Y%m%d')

    print(f"🔍 Buscando dados de Aspirin para o dia: {start_date}")

    all_results = []
    skip = 0
    max_records = 500

    while True:
        if skip >= max_records:
            break

        params = {
            "search": f'patient.drug.medicinalproduct:"aspirin"+AND+receivedate:[{start_date}+TO+{end_date}]',
            "limit": 50,
            "skip": skip
        }

        try:
            response = requests.get(API_BASE_URL, params=params, timeout=30)
            print(f"📡 Request {skip//50 + 1}, status {response.status_code}")

            data = response.json()
            results = data.get("results", [])

            print(f"🔎 {len(results)} registros nesta página")

            if not results:
                break

            all_results.extend(results)

            if len(results) < 50:
                break

            skip += 50

        except Exception as e:
            print(f"❌ Erro na requisição: {e}")
            break

    print(f"🎯 Total bruto coletado: {len(all_results)} registros")

    if not all_results:
        print("⚠️ Nenhum dado retornado para esse dia.")
        return "No data"

    extracted_data = [
        extract_specific_fields(record)
        for record in all_results
        if extract_specific_fields(record)
    ]

    df = pd.DataFrame(extracted_data)

    # Converter tipos
    if "receivedate" in df.columns:
        df["receivedate"] = pd.to_datetime(df["receivedate"], format="%Y%m%d", errors="coerce")

    print("👀 Preview do DataFrame:")
    print(df.head())
    print(df.dtypes)

    # Processar e carregar para BigQuery
    print("👀 Preview do DataFrame:")
    print(df.head())
    print(f"📊 Shape: {df.shape}")
    print(f"🔧 Tipos de dados originais:")
    print(df.dtypes)
    
    # CORREÇÃO: Converter tipos de dados
    def safe_convert_to_int(value):
        """Converte valor para inteiro de forma segura"""
        try:
            if value is None or pd.isna(value):
                return 0
            return int(float(value))
        except (ValueError, TypeError):
            return 0

    # Aplicar conversões
    if 'serious' in df.columns:
        df['serious'] = df['serious'].apply(safe_convert_to_int)
    
    if 'patient_patientsex' in df.columns:
        df['patient_patientsex'] = df['patient_patientsex'].apply(safe_convert_to_int)
    
    if 'receivedate' in df.columns:
        df['receivedate'] = pd.to_datetime(df['receivedate'], format='%Y%m%d', errors='coerce')
    
    if 'safetyreportid' in df.columns:
        df['safetyreportid'] = df['safetyreportid'].astype(str)
    
    if 'reactionmeddrapt' in df.columns:
        df['reactionmeddrapt'] = df['reactionmeddrapt'].astype(str)

    print(f"🔄 Tipos de dados após conversão:")
    print(df.dtypes)

    # Remover linhas com valores críticos nulos
    if not df.empty:
        initial_count = len(df)
        df = df.dropna(subset=['safetyreportid', 'receivedate'])
        final_count = len(df)
        print(f"📊 Linhas após limpeza: {final_count}/{initial_count}")

    # Carregar para BigQuery
    try:
        bq_hook = BigQueryHook(gcp_conn_id=GCP_CONN_ID, location=BQ_LOCATION, use_legacy_sql=False)
        credentials = bq_hook.get_credentials()
        destination_table = f"{BQ_DATASET}.{BQ_TABLE}"

        # Schema explícito
        table_schema = [
            {"name": "safetyreportid", "type": "STRING"},
            {"name": "receivedate", "type": "TIMESTAMP"},
            {"name": "serious", "type": "INTEGER"},
            {"name": "patient_patientsex", "type": "INTEGER"},
            {"name": "reactionmeddrapt", "type": "STRING"}
        ]

        print(f"🚀 Carregando {len(df)} linhas para BigQuery...")
        
        df.to_gbq(
            destination_table=destination_table,
            project_id=GCP_PROJECT,
            if_exists="append",
            credentials=credentials,
            table_schema=table_schema,
            location=BQ_LOCATION,
            progress_bar=False,
        )
        print(f"✅ Carga para BigQuery concluída! {len(df)} linhas carregadas.")
        return f"Successfully loaded {len(df)} records"

    except Exception as e:
        print(f"❌ Erro no BigQuery: {e}")
        
        # Tentativa alternativa simplificada
        try:
            print("🔄 Tentando abordagem alternativa...")
            # Criar um DataFrame mínimo
            minimal_df = pd.DataFrame([{
                'safetyreportid': 'MINIMAL_TEST',
                'receivedate': pd.Timestamp.now(),
                'serious': 1,
                'patient_patientsex': 1,
                'reactionmeddrapt': 'TEST'
            }])
            
            minimal_df.to_gbq(
                destination_table=destination_table,
                project_id=GCP_PROJECT,
                if_exists="append",
                credentials=credentials,
                location=BQ_LOCATION,
            )
            print("✅ Dados mínimos carregados para criar tabela.")
            return "Minimal data loaded"
            
        except Exception as alt_error:
            print(f"❌ Erro na abordagem alternativa: {alt_error}")
            return f"Failed to load data: {str(alt_error)}"

@dag(
    default_args=DEFAULT_ARGS,
    dag_id='fda_aspirin_daily',
    start_date=pendulum.datetime(2024, 10, 1, tz="UTC"),  # <-- aqui muda
    schedule='@daily',
    catchup=True,
    max_active_runs=1,
    tags=['fda', 'aspirin', 'bigquery', 'daily'],
)
def fda_aspirin_daily_dag():
    fetch_and_load_fda_data()

dag = fda_aspirin_daily_dag()
